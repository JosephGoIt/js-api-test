{"mappings":"AAAA,MAAMA,EAAW,oDACXC,EAAWC,SAASC,eAAe,UACnCC,EAAOF,SAASC,eAAe,QAC/BE,EAAUH,SAASC,eAAe,WA8DxC,SAASG,EAASC,EAAMC,GAAS,EAAOC,GACpC,MAAMC,EAAKR,SAASS,cAAc,MAClCD,EAAGD,GAAKA,EACRL,EAAKQ,YAAYF,GAwCrB,SAA2BA,EAAIH,EAAMC,GACjC,MAAMK,EAAWX,SAASS,cAAc,SACxCE,EAASC,KAAO,WAChBD,EAASE,UAAY,SACrBF,EAASG,QAAUR,EACnBE,EAAGE,YAAYC,E,CA5CfI,CAAkBP,EAAIH,EAAMC,GAgDhC,SAAiBE,EAAIH,GACjB,MAAMW,EAAOhB,SAASS,cAAc,QAC9BQ,EAAMjB,SAASkB,eAAeb,GACpCW,EAAKH,UAAY,OACjBG,EAAKN,YAAYO,GACjBT,EAAGE,YAAYM,E,CApDfG,CAAQX,EAAKH,GAgBjB,SAAqBG,GACjB,MAAMQ,EAAOhB,SAASS,cAAc,QAC9BQ,EAAMjB,SAASkB,eAAe,UACpCF,EAAKH,UAAY,QACjBG,EAAKN,YAAYO,GACjBT,EAAGE,YAAYM,E,CApBfI,CAAYZ,E,CA+BhB,SAASa,EAAQL,GAEb,OADWA,EAAKM,WACNf,E,CArBdgB,OAAOC,iBAAiB,oBARxBC,iBACI,MAAMC,OAtEOD,WACb,IACI,MAAME,QAAiBC,MAAM9B,GAC7B,IAAK6B,EAASE,GACV,MAAM,IAAIC,MAAM,yBAEpB,aAAaH,EAASI,M,CACxB,MAAOC,GACLC,QAAQD,MAAMA,E,GA8DEE,GAChBR,GACAA,EAAMS,SAAQ,EAAC9B,KAAEA,EAAIC,OAAEA,EAAMC,GAAEA,KAASH,EAASC,EAAMC,EAAQC,I,IAgDvER,EAASyB,iBAAiB,SAAS,KAC/B,MAAMY,EAAOjC,EAAQkC,MAAMC,OAC3B,GAAa,KAATF,EAEA,YADAG,MAAM,uBAGVnC,EAASgC,GAjHGX,OAAOe,IACnB,IAMI,WALuBZ,MAAM9B,EAAU,CACnC2C,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUL,MAEXX,GACV,MAAM,IAAIC,MAAM,qB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GAwGlBc,CADgB,CAAEzC,KAAQ,GAAG+B,IAAQ9B,QAAU,GAC/B,IAIpBN,SAASwB,iBAAiB,SAASC,MAAOsB,IACtC,MAAMC,EAASD,EAAMC,OACrB,GAAIA,EAAOC,UAAUC,SAAS,SAAU,CAEpC,MAAMC,EAAO9B,EAAQ2B,QA3GVvB,OAAO2B,IACtB,IAII,WAHuBxB,MAAM,GAAG9B,KAAYsD,IAAU,CAClDX,OAAQ,YAEEZ,GACV,MAAM,IAAIC,MAAM,wB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GAqGRqB,CAAWF,GAEjBH,EAAO1B,WAAWgC,Q,KAK1BpD,EAAKsB,iBAAiB,UAAUC,MAAOsB,IACnC,MAAMC,EAASD,EAAMC,OACrB,GAAIA,EAAOC,UAAUC,SAAS,UAAW,CACrC,MAAMC,EAAO9B,EAAQ2B,GACfO,EAAYP,EAAOlC,QACzBmB,QAAQuB,IAAI,uBAAwBL,EAAM,WAAYI,QA5G3C9B,OAAO2B,EAAQK,KAC9B,IAMI,WALuB7B,MAAM,GAAG9B,KAAYsD,IAAU,CAClDX,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUY,MAEX5B,GACV,MAAM,IAAIC,MAAM,wB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GAkGR0B,CAAWP,EAAM,CAAE7C,OAAQiD,G","sources":["src/js/example-api-01.js"],"sourcesContent":["const BASE_URL = \"https://65f2d1ae105614e6549efd32.mockapi.io/todos\";\nconst addBtnEl = document.getElementById(\"addBtn\");\nconst myUL = document.getElementById(\"myUL\");\nconst myInput = document.getElementById(\"myInput\");\n\n// Function to fetch all todos\nconst getTodos = async () => {\n    try {\n        const response = await fetch(BASE_URL);\n        if (!response.ok) {\n            throw new Error('Failed to fetch todos');\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to add a todo\nconst addTodo = async (newTodo) => {\n    try {\n        const response = await fetch(BASE_URL, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(newTodo),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to delete a todo\nconst deleteTodo = async (todoId) => {\n    try {\n        const response = await fetch(`${BASE_URL}/${todoId}`, {\n            method: \"DELETE\"\n        });\n        if (!response.ok) {\n            throw new Error('Failed to delete todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to update a todo\nconst updateTodo = async (todoId, updatedTodo) => {\n    try {\n        const response = await fetch(`${BASE_URL}/${todoId}`, {\n            method: \"PUT\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(updatedTodo),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to update todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to create a list item\nfunction createLI(text, isDone = false, id) {\n    const li = document.createElement(\"li\");\n    li.id = id; //assigning li's id same as todo's id\n    myUL.appendChild(li);\n    addUpdateCheckbox(li, text, isDone);\n    addText(li , text);\n    addCloseBtn(li);\n}\n\n// Function to fill the todo list\nasync function fillTodoList() {\n    const todos = await getTodos();\n    if (todos) {\n        todos.forEach(({ text, isDone, id }) => createLI(text, isDone, id));\n    }\n}\n\n// Event listener for DOMContentLoaded\nwindow.addEventListener('DOMContentLoaded', fillTodoList);\n\n// Function to add close button\nfunction addCloseBtn(li) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(\"delete\");\n    span.className = \"close\";\n    span.appendChild(txt);\n    li.appendChild(span);\n\n    // Event listener for close button click... meron nga palang event delegation\n    // span.addEventListener('click', () => {\n    //     const liId = getLiId(span);\n    //     console.log(\"LI ID:\", liId);\n    //     // Perform further actions with the liId if needed\n    // });\n}\n\n// Function to get the id of the corresponding li element when its close button is clicked\nfunction getLiId(span) {\n    const li = span.parentNode;\n    return li.id; // Assuming the id of li element is set as todo's id\n}\n\n// Function to add update checkbox\nfunction addUpdateCheckbox(li, text, isDone) {\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.className = \"update\";\n    checkbox.checked = isDone;\n    li.appendChild(checkbox);\n}\n\n// Function to add text\nfunction addText(li, text) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(text);\n    span.className = \"text\";\n    span.appendChild(txt);\n    li.appendChild(span);\n}\n\n// Event listener for add button click\naddBtnEl.addEventListener('click', () => {\n    const todo = myInput.value.trim();\n    if (todo === '') {\n        alert(\"Please enter a todo\");\n        return;\n    }\n    createLI(todo);\n    const newTodo = { \"text\": `${todo}`, \"isDone\": false };\n    addTodo(newTodo);\n});\n\n// Event listener for close button clicks using event delegation\ndocument.addEventListener('click', async (event) => {\n    const target = event.target;\n    if (target.classList.contains('close')) {\n        // alert(target.parentNode.className)\n        const liId = getLiId(target);\n        // alert(liId);\n        // Perform further actions with the liId if needed\n        await deleteTodo(liId);\n        // Remove the corresponding li element from the DOM\n        target.parentNode.remove();\n    }\n});\n\n// Event listener for checkbox clicks using event delegation\nmyUL.addEventListener('change', async (event) => {\n    const target = event.target;\n    if (target.classList.contains('update')) {\n        const liId = getLiId(target);\n        const isChecked = target.checked;\n        console.log(\"Updating LI with ID:\", liId, \"Is Done:\", isChecked);\n        await updateTodo(liId, { isDone: isChecked });\n    }\n});"],"names":["$e24191c9375da957$var$BASE_URL","$e24191c9375da957$var$addBtnEl","document","getElementById","$e24191c9375da957$var$myUL","$e24191c9375da957$var$myInput","$e24191c9375da957$var$createLI","text","isDone","id","li","createElement","appendChild","checkbox","type","className","checked","$e24191c9375da957$var$addUpdateCheckbox","span","txt","createTextNode","$e24191c9375da957$var$addText","$e24191c9375da957$var$addCloseBtn","$e24191c9375da957$var$getLiId","parentNode","window","addEventListener","async","todos","response","fetch","ok","Error","json","error","console","$e24191c9375da957$var$getTodos","forEach","todo","value","trim","alert","newTodo","method","headers","body","JSON","stringify","$e24191c9375da957$var$addTodo","event","target","classList","contains","liId","todoId","$e24191c9375da957$var$deleteTodo","remove","isChecked","log","updatedTodo","$e24191c9375da957$var$updateTodo"],"version":3,"file":"example-api-01.441f01db.js.map"}