{"mappings":"AAAA,MAAMA,EAAW,oDACXC,EAAWC,SAASC,eAAe,UACnCC,EAAOF,SAASC,eAAe,QAC/BE,EAAUH,SAASC,eAAe,WAiExCG,eAAeC,IACX,MAAMC,OA/DOF,WACb,IACI,MAAMG,QAAiBC,MAAMV,GAC7B,IAAKS,EAASE,GACV,MAAM,IAAIC,MAAM,yBAEpB,aAAaH,EAASI,M,CACxB,MAAOC,GACLC,QAAQD,MAAMA,E,GAuDEE,GAEhBR,GACAA,EAAMS,SAAQ,EAACC,KAAEA,EAAIC,OAAEA,EAAMC,GAAEA,KAKvC,SAAkBF,EAAMC,EAAQC,GAC5B,MAAMC,EAAKnB,SAASoB,cAAc,MAClCD,EAAGD,GAAKA,EACRhB,EAAKmB,YAAYF,GAOrB,SAA2BA,EAAIF,GAC3B,MAAMK,EAAWtB,SAASoB,cAAc,SACxCE,EAASC,KAAO,WAChBD,EAASE,UAAY,SACrBF,EAASG,QAAUR,EACnBE,EAAGE,YAAYC,E,CAXfI,CAAkBP,EAAIF,GAe1B,SAAiBE,EAAIH,GACjB,MAAMW,EAAO3B,SAASoB,cAAc,QAC9BQ,EAAM5B,SAAS6B,eAAeb,GACpCW,EAAKH,UAAY,OACjBG,EAAKN,YAAYO,GACjBT,EAAGE,YAAYM,E,CAnBfG,CAAQX,EAAKH,GAuBjB,SAAqBG,GACjB,MAAMQ,EAAO3B,SAASoB,cAAc,QAC9BQ,EAAM5B,SAAS6B,eAAe,UACpCF,EAAKH,UAAY,QACjBG,EAAKN,YAAYO,GACjBT,EAAGE,YAAYM,E,CA3BfI,CAAYZ,E,CAXgCa,CAAShB,EAAMC,EAAQC,I,CA0CvE,SAASe,EAAQN,GAEb,OADWA,EAAKO,WACNhB,E,CAnDdiB,OAAOC,iBAAiB,mBAAoB/B,GAuD5CN,EAASqC,iBAAiB,SAAShC,UAC/B,MAAMiC,EAAOlC,EAAQmC,MAAMC,OAC3B,GAAa,KAATF,EAEA,YADAG,MAAM,uBAGV,MAAMC,EAAU,CAAEzB,KAAQ,GAAGqB,IAAQpB,QAAU,QA3GnCb,OAAOqC,IACnB,IAMI,WALuBjC,MAAMV,EAAU,CACnC4C,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUL,MAEXhC,GACV,MAAM,IAAIC,MAAM,qB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GAiGZmC,CAAQN,GAEdvC,EAAK8C,UAAY,GAEjB3C,GAAc,IAIlBL,SAASoC,iBAAiB,SAAShC,MAAO6C,IACtC,MAAMC,EAASD,EAAMC,OACrB,GAAIA,EAAOC,UAAUC,SAAS,SAAU,CAEpC,MAAMC,EAAOpB,EAAQiB,QAxFV9C,OAAOkD,IACtB,IAII,WAHuB9C,MAAM,GAAGV,KAAYwD,IAAU,CAClDZ,OAAQ,YAEEjC,GACV,MAAM,IAAIC,MAAM,wB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GAkFR2C,CAAWF,GAEjBH,EAAOhB,WAAWsB,Q,KAK1BtD,EAAKkC,iBAAiB,UAAUhC,MAAO6C,IACnC,MAAMC,EAASD,EAAMC,OACrB,GAAIA,EAAOC,UAAUC,SAAS,UAAW,CACrC,MAAMC,EAAOpB,EAAQiB,GACfO,EAAYP,EAAOzB,QACzBZ,QAAQ6C,IAAI,uBAAwBL,EAAM,WAAYI,QAvH3CrD,OAAOkD,EAAQK,KAC9B,IAMI,WALuBnD,MAAM,GAAGV,KAAYwD,IAAU,CAClDZ,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUa,MAEXlD,GACV,MAAM,IAAIC,MAAM,wB,CAEtB,MAAOE,GACLC,QAAQD,MAAMA,E,GA6GRgD,CAAWP,EAAM,CAAEpC,OAAQwC,G","sources":["src/js/example-api-01.js"],"sourcesContent":["const BASE_URL = \"https://65f2d1ae105614e6549efd32.mockapi.io/todos\";\nconst addBtnEl = document.getElementById(\"addBtn\");\nconst myUL = document.getElementById(\"myUL\");\nconst myInput = document.getElementById(\"myInput\");\n\n// Function to fetch all todos\nconst getTodos = async () => {\n    try {\n        const response = await fetch(BASE_URL);\n        if (!response.ok) {\n            throw new Error('Failed to fetch todos');\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to add a todo\nconst addTodo = async (newTodo) => {\n    try {\n        const response = await fetch(BASE_URL, {\n            method: \"POST\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(newTodo),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to add todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to update a todo\nconst updateTodo = async (todoId, updatedTodo) => {\n    try {\n        const response = await fetch(`${BASE_URL}/${todoId}`, {\n            method: \"PUT\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify(updatedTodo),\n        });\n        if (!response.ok) {\n            throw new Error('Failed to update todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Function to delete a todo\nconst deleteTodo = async (todoId) => {\n    try {\n        const response = await fetch(`${BASE_URL}/${todoId}`, {\n            method: \"DELETE\"\n        });\n        if (!response.ok) {\n            throw new Error('Failed to delete todo');\n        }\n    } catch (error) {\n        console.error(error);\n    }\n};\n\n// Event listener for DOMContentLoaded\nwindow.addEventListener('DOMContentLoaded', fillTodoList);\n\n// Function to fill the todo list\nasync function fillTodoList() {\n    const todos = await getTodos();\n    // console.log(todos);\n    if (todos) {\n        todos.forEach(({ text, isDone, id }) => createLI(text, isDone, id));\n    }\n}\n\n// Function to create a list item\nfunction createLI(text, isDone, id) {\n    const li = document.createElement(\"li\");\n    li.id = id; //assigning li's id same as todo's id\n    myUL.appendChild(li);\n    addUpdateCheckbox(li, isDone);\n    addText(li , text);\n    addCloseBtn(li);\n}\n\n// Function to add update checkbox\nfunction addUpdateCheckbox(li, isDone) {\n    const checkbox = document.createElement(\"input\");\n    checkbox.type = \"checkbox\";\n    checkbox.className = \"update\";\n    checkbox.checked = isDone;\n    li.appendChild(checkbox);\n}\n\n// Function to add text\nfunction addText(li, text) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(text);\n    span.className = \"text\";\n    span.appendChild(txt);\n    li.appendChild(span);\n}\n\n// Function to add close button\nfunction addCloseBtn(li) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(\"delete\");\n    span.className = \"close\";\n    span.appendChild(txt);\n    li.appendChild(span);\n}\n\n// Function to get the id of the corresponding li element when its close button is clicked\nfunction getLiId(span) {\n    const li = span.parentNode;\n    return li.id; // Assuming the id of li element is set as todo's id\n}\n\n// Event listener for add button click\naddBtnEl.addEventListener('click', async () => {\n    const todo = myInput.value.trim();\n    if (todo === '') {\n        alert(\"Please enter a todo\");\n        return;\n    }\n    const newTodo = { \"text\": `${todo}`, \"isDone\": false };\n    await addTodo(newTodo); //await for new todo to be added\n    // Clear existing list items\n    myUL.innerHTML = '';\n    // Rebuild the todo list\n    fillTodoList();    \n});\n\n// Event listener for close button clicks using event delegation\ndocument.addEventListener('click', async (event) => {\n    const target = event.target;\n    if (target.classList.contains('close')) {\n        // alert(target.parentNode.className)\n        const liId = getLiId(target);\n        // alert(liId);\n        // Perform further actions with the liId if needed\n        await deleteTodo(liId);\n        // Remove the corresponding li element from the DOM\n        target.parentNode.remove();\n    }\n});\n\n// Event listener for checkbox clicks using event delegation\nmyUL.addEventListener('change', async (event) => {\n    const target = event.target;\n    if (target.classList.contains('update')) {\n        const liId = getLiId(target);\n        const isChecked = target.checked;\n        console.log(\"Updating LI with ID:\", liId, \"Is Done:\", isChecked);\n        await updateTodo(liId, { isDone: isChecked });\n    }\n});"],"names":["$e24191c9375da957$var$BASE_URL","$e24191c9375da957$var$addBtnEl","document","getElementById","$e24191c9375da957$var$myUL","$e24191c9375da957$var$myInput","async","$e24191c9375da957$var$fillTodoList","todos","response","fetch","ok","Error","json","error","console","$e24191c9375da957$var$getTodos","forEach","text","isDone","id","li","createElement","appendChild","checkbox","type","className","checked","$e24191c9375da957$var$addUpdateCheckbox","span","txt","createTextNode","$e24191c9375da957$var$addText","$e24191c9375da957$var$addCloseBtn","$e24191c9375da957$var$createLI","$e24191c9375da957$var$getLiId","parentNode","window","addEventListener","todo","value","trim","alert","newTodo","method","headers","body","JSON","stringify","$e24191c9375da957$var$addTodo","innerHTML","event","target","classList","contains","liId","todoId","$e24191c9375da957$var$deleteTodo","remove","isChecked","log","updatedTodo","$e24191c9375da957$var$updateTodo"],"version":3,"file":"example-api-01.0369ce24.js.map"}